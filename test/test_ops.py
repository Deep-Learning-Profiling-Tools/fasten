import pytest
import torch

from fasten import Engine, compact_tensor_types, ops

slices0 = [slice(0, 63), slice(63, 90), slice(90, 128)]
slices1 = [slice(0, 127), slice(127, 256), slice(256, 257), slice(257, 512)]
AIFB = [slice(0, 4139, None), slice(4139, 8278, None), slice(8278, 12065, None), slice(12065, 15852, None), slice(15852, 19814, None), slice(19814, 23776, None), slice(23776, 26252, None), slice(26252, 28728, None), slice(28728, 29113, None), slice(29113, 29498, None), slice(29498, 30705, None), slice(30705, 31912, None), slice(31912, 33122, None), slice(33122, 34332, None), slice(34332, 35549, None), slice(35549, 36766, None), slice(36766, 37718, None), slice(37718, 38670, None), slice(38670, 39622, None), slice(39622, 40574, None), slice(40574, 41330, None), slice(41330, 42086, None), slice(42086, 42832, None), slice(42832, 43578, None), slice(43578, 44146, None), slice(44146, 44714, None), slice(44714, 45254, None), slice(45254, 45794, None), slice(45794, 46324, None), slice(46324, 46854, None), slice(46854, 47210, None), slice(47210, 47566, None), slice(47566, 47904, None), slice(47904, 48242, None), slice(48242, 48551, None), slice(48551, 48860, None), slice(48860, 49151, None), slice(49151, 49442, None), slice(49442, 49573, None), slice(49573, 49704, None), slice(49704, 49902, None), slice(49902, 50100, None), slice(50100, 50326, None), slice(50326, 50552, None), slice(50552, 50750, None), slice(50750, 50948, None), slice(50948, 51148, None), slice(51148, 51348, None), slice(51348, 51383, None), slice(51383, 51418, None), slice(51418, 51608, None), slice(51608, 51798, None), slice(51798, 51956, None), slice(51956, 52114, None), slice(52114, 52137, None), slice(52137, 52160, None), slice(52160, 52160, None), slice(52160, 52160, None), slice(52160, 52273, None), slice(52273, 52386, None), slice(52386, 52530, None), slice(52530, 52674, None), slice(52674, 52803, None), slice(52803, 52932, None), slice(52932, 53046, None), slice(53046, 53160, None), slice(53160, 53239, None), slice(53239, 53318, None), slice(53318, 53397, None), slice(53397, 53476, None), slice(53476, 53540, None), slice(53540, 53604, None), slice(53604, 53668, None), slice(53668, 53732, None), slice(53732, 53782, None), slice(53782, 53832, None), slice(53832, 53880, None), slice(53880, 53928, None), slice(53928, 53944, None), slice(53944, 53960, None), slice(53960, 53975, None), slice(53975, 53990, None), slice(53990, 54002, None), slice(54002, 54014, None), slice(54014, 54014, None), slice(54014, 54014, None), slice(54014, 54019, None), slice(54019, 54024, None), slice(54024, 54024, None), slice(54024, 54024, None)]
AM = [slice(0, 219777, None), slice(219777, 439554, None), slice(439554, 474471, None), slice(474471, 509388, None), slice(509388, 722309, None), slice(722309, 935230, None), slice(935230, 946166, None), slice(946166, 957102, None), slice(957102, 969238, None), slice(969238, 981374, None), slice(981374, 993088, None), slice(993088, 1004802, None), slice(1004802, 1016839, None), slice(1016839, 1028876, None), slice(1028876, 1039026, None), slice(1039026, 1049176, None), slice(1049176, 1068202, None), slice(1068202, 1087228, None), slice(1087228, 1102580, None), slice(1102580, 1117932, None), slice(1117932, 1133152, None), slice(1133152, 1148372, None), slice(1148372, 1165699, None), slice(1165699, 1183026, None), slice(1183026, 1215471, None), slice(1215471, 1247916, None), slice(1247916, 1253249, None), slice(1253249, 1258582, None), slice(1258582, 1260794, None), slice(1260794, 1263006, None), slice(1263006, 1295173, None), slice(1295173, 1327340, None), slice(1327340, 1416065, None), slice(1416065, 1504790, None), slice(1504790, 1526353, None), slice(1526353, 1547916, None), slice(1547916, 1569311, None), slice(1569311, 1590706, None), slice(1590706, 1601546, None), slice(1601546, 1612386, None), slice(1612386, 1641638, None), slice(1641638, 1670890, None), slice(1670890, 1674833, None), slice(1674833, 1678776, None), slice(1678776, 1679776, None), slice(1679776, 1680776, None), slice(1680776, 1684569, None), slice(1684569, 1688362, None), slice(1688362, 1689362, None), slice(1689362, 1690362, None), slice(1690362, 1694155, None), slice(1694155, 1697948, None), slice(1697948, 1770862, None), slice(1770862, 1843776, None), slice(1843776, 1847569, None), slice(1847569, 1851362, None), slice(1851362, 1855155, None), slice(1855155, 1858948, None), slice(1858948, 1887635, None), slice(1887635, 1916322, None), slice(1916322, 1917632, None), slice(1917632, 1918942, None), slice(1918942, 1923764, None), slice(1923764, 1928586, None), slice(1928586, 1928776, None), slice(1928776, 1928966, None), slice(1928966, 1994746, None), slice(1994746, 2060526, None), slice(2060526, 2111725, None), slice(2111725, 2162924, None), slice(2162924, 2172695, None), slice(2172695, 2182466, None), slice(2182466, 2192234, None), slice(2192234, 2202002, None), slice(2202002, 2257504, None), slice(2257504, 2313006, None), slice(2313006, 2366623, None), slice(2366623, 2420240, None), slice(2420240, 2425126, None), slice(2425126, 2430012, None), slice(2430012, 2481117, None), slice(2481117, 2532222, None), slice(2532222, 2547409, None), slice(2547409, 2562596, None), slice(2562596, 2576329, None), slice(2576329, 2590062, None), slice(2590062, 2620197, None), slice(2620197, 2650332, None), slice(2650332, 2666552, None), slice(2666552, 2682772, None), slice(2682772, 2697348, None), slice(2697348, 2711924, None), slice(2711924, 2741600, None), slice(2741600, 2771276, None), slice(2771276, 2786375, None), slice(2786375, 2801474, None), slice(2801474, 2827119, None), slice(2827119, 2852764, None), slice(2852764, 2858835, None), slice(2858835, 2864906, None), slice(2864906, 2866789, None), slice(2866789, 2868672, None), slice(2868672, 2881814, None), slice(2881814, 2894956, None), slice(2894956, 2897035, None), slice(2897035, 2899114, None), slice(2899114, 2899854, None), slice(2899854, 2900594, None), slice(2900594, 2905179, None), slice(2905179, 2909764, None), slice(2909764, 2931903, None), slice(2931903, 2954042, None), slice(2954042, 2973647, None), slice(2973647, 2993252, None), slice(2993252, 2995939, None), slice(2995939, 2998626, None), slice(2998626, 3001197, None), slice(3001197, 3003768, None), slice(3003768, 3005946, None), slice(3005946, 3008124, None), slice(3008124, 3023253, None), slice(3023253, 3038382, None), slice(3038382, 3053727, None), slice(3053727, 3069072, None), slice(3069072, 3084384, None), slice(3084384, 3099696, None), slice(3099696, 3107054, None), slice(3107054, 3114412, None), slice(3114412, 3121732, None), slice(3121732, 3129052, None), slice(3129052, 3134767, None), slice(3134767, 3140482, None), slice(3140482, 3145839, None), slice(3145839, 3151196, None), slice(3151196, 3151852, None), slice(3151852, 3152508, None), slice(3152508, 3159642, None), slice(3159642, 3166776, None), slice(3166776, 3173910, None), slice(3173910, 3181044, None), slice(3181044, 3188009, None), slice(3188009, 3194974, None), slice(3194974, 3200608, None), slice(3200608, 3206242, None), slice(3206242, 3211411, None), slice(3211411, 3216580, None), slice(3216580, 3218688, None), slice(3218688, 3220796, None), slice(3220796, 3226497, None), slice(3226497, 3232198, None), slice(3232198, 3235028, None), slice(3235028, 3237858, None), slice(3237858, 3241117, None), slice(3241117, 3244376, None), slice(3244376, 3248396, None), slice(3248396, 3252416, None), slice(3252416, 3254980, None), slice(3254980, 3257544, None), slice(3257544, 3257856, None), slice(3257856, 3258168, None), slice(3258168, 3261682, None), slice(3261682, 3265196, None), slice(3265196, 3265762, None), slice(3265762, 3266328, None), slice(3266328, 3268607, None), slice(3268607, 3270886, None), slice(3270886, 3274766, None), slice(3274766, 3278646, None), slice(3278646, 3281853, None), slice(3281853, 3285060, None), slice(3285060, 3287503, None), slice(3287503, 3289946, None), slice(3289946, 3293371, None), slice(3293371, 3296796, None), slice(3296796, 3299675, None), slice(3299675, 3302554, None), slice(3302554, 3303956, None), slice(3303956, 3305358, None), slice(3305358, 3305446, None), slice(3305446, 3305534, None), slice(3305534, 3306266, None), slice(3306266, 3306998, None), slice(3306998, 3308131, None), slice(3308131, 3309264, None), slice(3309264, 3310398, None), slice(3310398, 3311532, None), slice(3311532, 3312106, None), slice(3312106, 3312680, None), slice(3312680, 3313363, None), slice(3313363, 3314046, None), slice(3314046, 3314208, None), slice(3314208, 3314370, None), slice(3314370, 3314531, None), slice(3314531, 3314692, None), slice(3314692, 3314770, None), slice(3314770, 3314848, None), slice(3314848, 3314961, None), slice(3314961, 3315074, None), slice(3315074, 3315084, None), slice(3315084, 3315094, None), slice(3315094, 3316630, None), slice(3316630, 3318166, None), slice(3318166, 3318654, None), slice(3318654, 3319142, None), slice(3319142, 3319599, None), slice(3319599, 3320056, None), slice(3320056, 3320253, None), slice(3320253, 3320450, None), slice(3320450, 3320473, None), slice(3320473, 3320496, None), slice(3320496, 3320813, None), slice(3320813, 3321130, None), slice(3321130, 3321303, None), slice(3321303, 3321476, None), slice(3321476, 3321578, None), slice(3321578, 3321680, None), slice(3321680, 3321959, None), slice(3321959, 3322238, None), slice(3322238, 3322308, None), slice(3322308, 3322378, None), slice(3322378, 3322392, None), slice(3322392, 3322406, None), slice(3322406, 3322788, None), slice(3322788, 3323170, None), slice(3323170, 3323185, None), slice(3323185, 3323200, None), slice(3323200, 3323332, None), slice(3323332, 3323464, None), slice(3323464, 3323635, None), slice(3323635, 3323806, None), slice(3323806, 3323901, None), slice(3323901, 3323996, None), slice(3323996, 3324007, None), slice(3324007, 3324018, None), slice(3324018, 3324018, None), slice(3324018, 3324018, None), slice(3324018, 3324021, None), slice(3324021, 3324024, None), slice(3324024, 3324026, None), slice(3324026, 3324028, None), slice(3324028, 3324031, None), slice(3324031, 3324034, None), slice(3324034, 3324091, None), slice(3324091, 3324148, None), slice(3324148, 3324156, None), slice(3324156, 3324164, None), slice(3324164, 3324271, None), slice(3324271, 3324378, None), slice(3324378, 3324404, None), slice(3324404, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None), slice(3324430, 3324430, None)]
BGS = [slice(0, 83031, None), slice(83031, 166062, None), slice(166062, 166811, None), slice(166811, 167560, None), slice(167560, 168119, None), slice(168119, 168678, None), slice(168678, 180893, None), slice(180893, 193108, None), slice(193108, 204917, None), slice(204917, 216726, None), slice(216726, 241413, None), slice(241413, 266100, None), slice(266100, 290773, None), slice(290773, 315446, None), slice(315446, 339290, None), slice(339290, 363134, None), slice(363134, 363223, None), slice(363223, 363312, None), slice(363312, 363401, None), slice(363401, 363490, None), slice(363490, 363579, None), slice(363579, 363668, None), slice(363668, 363757, None), slice(363757, 363846, None), slice(363846, 384079, None), slice(384079, 404312, None), slice(404312, 412965, None), slice(412965, 421618, None), slice(421618, 442757, None), slice(442757, 463896, None), slice(463896, 464093, None), slice(464093, 464290, None), slice(464290, 464290, None), slice(464290, 464290, None), slice(464290, 478797, None), slice(478797, 493304, None), slice(493304, 493304, None), slice(493304, 493304, None), slice(493304, 507811, None), slice(507811, 522318, None), slice(522318, 522529, None), slice(522529, 522740, None), slice(522740, 535639, None), slice(535639, 548538, None), slice(548538, 561439, None), slice(561439, 574340, None), slice(574340, 587123, None), slice(587123, 599906, None), slice(599906, 611982, None), slice(611982, 624058, None), slice(624058, 635998, None), slice(635998, 647938, None), slice(647938, 659668, None), slice(659668, 671398, None), slice(671398, 682875, None), slice(682875, 694352, None), slice(694352, 706044, None), slice(706044, 717736, None), slice(717736, 717921, None), slice(717921, 718106, None), slice(718106, 729782, None), slice(729782, 741458, None), slice(741458, 753134, None), slice(753134, 764810, None), slice(764810, 776486, None), slice(776486, 788162, None), slice(788162, 799700, None), slice(799700, 811238, None), slice(811238, 822914, None), slice(822914, 834590, None), slice(834590, 846266, None), slice(846266, 857942, None), slice(857942, 868479, None), slice(868479, 879016, None), slice(879016, 887343, None), slice(887343, 895670, None), slice(895670, 896640, None), slice(896640, 897610, None), slice(897610, 897736, None), slice(897736, 897862, None), slice(897862, 904605, None), slice(904605, 911348, None), slice(911348, 918679, None), slice(918679, 926010, None), slice(926010, 931873, None), slice(931873, 937736, None), slice(937736, 938019, None), slice(938019, 938302, None), slice(938302, 938379, None), slice(938379, 938456, None), slice(938456, 938534, None), slice(938534, 938612, None), slice(938612, 944146, None), slice(944146, 949680, None), slice(949680, 954920, None), slice(954920, 960160, None), slice(960160, 965110, None), slice(965110, 970060, None), slice(970060, 974748, None), slice(974748, 979436, None), slice(979436, 979663, None), slice(979663, 979890, None), slice(979890, 980032, None), slice(980032, 980174, None), slice(980174, 980391, None), slice(980391, 980608, None), slice(980608, 980608, None), slice(980608, 980608, None), slice(980608, 980764, None), slice(980764, 980920, None), slice(980920, 981104, None), slice(981104, 981288, None), slice(981288, 984252, None), slice(984252, 987216, None), slice(987216, 990176, None), slice(990176, 993136, None), slice(993136, 995861, None), slice(995861, 998586, None), slice(998586, 1001537, None), slice(1001537, 1004488, None), slice(1004488, 1007440, None), slice(1007440, 1010392, None), slice(1010392, 1010746, None), slice(1010746, 1011100, None), slice(1011100, 1011101, None), slice(1011101, 1011102, None), slice(1011102, 1011628, None), slice(1011628, 1012154, None), slice(1012154, 1012154, None), slice(1012154, 1012154, None), slice(1012154, 1013696, None), slice(1013696, 1015238, None), slice(1015238, 1016468, None), slice(1016468, 1017698, None), slice(1017698, 1017720, None), slice(1017720, 1017742, None), slice(1017742, 1017853, None), slice(1017853, 1017964, None), slice(1017964, 1017964, None), slice(1017964, 1017964, None), slice(1017964, 1018370, None), slice(1018370, 1018776, None), slice(1018776, 1018787, None), slice(1018787, 1018798, None), slice(1018798, 1018875, None), slice(1018875, 1018952, None), slice(1018952, 1019033, None), slice(1019033, 1019114, None), slice(1019114, 1019520, None), slice(1019520, 1019926, None), slice(1019926, 1019937, None), slice(1019937, 1019948, None), slice(1019948, 1020354, None), slice(1020354, 1020760, None), slice(1020760, 1021066, None), slice(1021066, 1021372, None), slice(1021372, 1021372, None), slice(1021372, 1021372, None), slice(1021372, 1021381, None), slice(1021381, 1021390, None), slice(1021390, 1021390, None), slice(1021390, 1021390, None), slice(1021390, 1021390, None), slice(1021390, 1021390, None), slice(1021390, 1021390, None), slice(1021390, 1021390, None), slice(1021390, 1021413, None), slice(1021413, 1021436, None), slice(1021436, 1021454, None), slice(1021454, 1021472, None), slice(1021472, 1021472, None), slice(1021472, 1021472, None), slice(1021472, 1021475, None), slice(1021475, 1021478, None), slice(1021478, 1021479, None), slice(1021479, 1021480, None), slice(1021480, 1021483, None), slice(1021483, 1021486, None), slice(1021486, 1021488, None), slice(1021488, 1021490, None), slice(1021490, 1021492, None), slice(1021492, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021494, None), slice(1021494, 1021495, None), slice(1021495, 1021496, None), slice(1021496, 1021496, None), slice(1021496, 1021496, None), slice(1021496, 1021496, None), slice(1021496, 1021496, None), slice(1021496, 1021496, None), slice(1021496, 1021496, None), slice(1021496, 1021496, None), slice(1021496, 1021496, None)]
DBLP = [slice(0, 4057, None), slice(4057, 18385, None), slice(18385, 32713, None), slice(32713, 47041, None), slice(47041, 54764, None), slice(54764, 54784, None), slice(54784, 58841, None), slice(58841, 73169, None), slice(73169, 87497, None), slice(87497, 101825, None), slice(101825, 109548, None), slice(109548, 109568, None), slice(109568, 113625, None), slice(113625, 127953, None), slice(127953, 142281, None), slice(142281, 156609, None), slice(156609, 164332, None), slice(164332, 164352, None), slice(164352, 168409, None), slice(168409, 182737, None), slice(182737, 197065, None), slice(197065, 211393, None), slice(211393, 219116, None), slice(219116, 219136, None), slice(219136, 223193, None), slice(223193, 237521, None), slice(237521, 251849, None), slice(251849, 266177, None), slice(266177, 273900, None), slice(273900, 273920, None), slice(273920, 277977, None), slice(277977, 292305, None), slice(292305, 306633, None), slice(306633, 320961, None), slice(320961, 328684, None), slice(328684, 328704, None), slice(328704, 332761, None), slice(332761, 347089, None), slice(347089, 361417, None), slice(361417, 375745, None), slice(375745, 383468, None), slice(383468, 383488, None), slice(383488, 387545, None), slice(387545, 401873, None), slice(401873, 416201, None), slice(416201, 430529, None), slice(430529, 438252, None), slice(438252, 438272, None), slice(438272, 442329, None), slice(442329, 456657, None), slice(456657, 470985, None), slice(470985, 485313, None), slice(485313, 493036, None), slice(493036, 493056, None), slice(493056, 497113, None), slice(497113, 511441, None), slice(511441, 525769, None), slice(525769, 540097, None), slice(540097, 547820, None), slice(547820, 547840, None), slice(547840, 551897, None), slice(551897, 566225, None), slice(566225, 580553, None), slice(580553, 594881, None), slice(594881, 602604, None), slice(602604, 602624, None), slice(602624, 606681, None), slice(606681, 621009, None), slice(621009, 635337, None), slice(635337, 649665, None), slice(649665, 657388, None), slice(657388, 657408, None), slice(657408, 661465, None), slice(661465, 675793, None), slice(675793, 690121, None), slice(690121, 704449, None), slice(704449, 712172, None), slice(712172, 712192, None), slice(712192, 716249, None), slice(716249, 730577, None), slice(730577, 744905, None), slice(744905, 759233, None), slice(759233, 766956, None), slice(766956, 766976, None), slice(766976, 771033, None), slice(771033, 785361, None), slice(785361, 799689, None), slice(799689, 814017, None), slice(814017, 821740, None), slice(821740, 821760, None), slice(821760, 825817, None), slice(825817, 840145, None), slice(840145, 854473, None), slice(854473, 868801, None), slice(868801, 876524, None), slice(876524, 876544, None)]
MUTAG = [slice(0, 22484, None), slice(22484, 44968, None), slice(44968, 63602, None), slice(63602, 82236, None), slice(82236, 91553, None), slice(91553, 100870, None), slice(100870, 110059, None), slice(110059, 119248, None), slice(119248, 128437, None), slice(128437, 137626, None), slice(137626, 141152, None), slice(141152, 144678, None), slice(144678, 145018, None), slice(145018, 145358, None), slice(145358, 145663, None), slice(145663, 145968, None), slice(145968, 146261, None), slice(146261, 146554, None), slice(146554, 146837, None), slice(146837, 147120, None), slice(147120, 147323, None), slice(147323, 147526, None), slice(147526, 147546, None), slice(147546, 147566, None), slice(147566, 147627, None), slice(147627, 147688, None), slice(147688, 147743, None), slice(147743, 147798, None), slice(147798, 147833, None), slice(147833, 147868, None), slice(147868, 147893, None), slice(147893, 147918, None), slice(147918, 147943, None), slice(147943, 147968, None), slice(147968, 147985, None), slice(147985, 148002, None), slice(148002, 148005, None), slice(148005, 148008, None), slice(148008, 148021, None), slice(148021, 148034, None), slice(148034, 148047, None), slice(148047, 148060, None), slice(148060, 148066, None), slice(148066, 148072, None), slice(148072, 148077, None), slice(148077, 148082, None)]

# M = [54024, 54024, 3324430, 3324430, 1021496, 1021496, 876544, 876544, 148082, 148082]
# K = [16, 64, 16, 64, 16, 64, 16, 64, 16, 64]
# N = [4, 4, 11, 11, 2, 2, 8, 8, 2, 2 ]
# slices =[AIFB, AIFB, AM, AM, BGS, BGS, DBLP, DBLP, MUTAG, MUTAG]


@pytest.mark.parametrize("device", ["cuda"])
@pytest.mark.parametrize("engine", [Engine.TRITON])
@pytest.mark.parametrize("phase", ["forward", "backward"])
@pytest.mark.parametrize("dtype", ["float32", "float16"])
@pytest.mark.parametrize("slices", [AIFB])
@pytest.mark.parametrize("K", [16, 32, 48, 64, 80])
def test_segment_matmul(K, slices: list, engine: Engine, device: str, phase: str, dtype: str) -> None:
    if engine == Engine.TRITON and device == "cpu":
        pytest.skip("Triton does not support CPU inference")
    if device == "cpu" and dtype == "float16":
        pytest.skip("CPU does not support FP16")
    dtype = getattr(torch, dtype)
    M = sum([s.stop - s.start for s in slices])
    data = torch.randn((M, K), device=device, dtype=dtype)
    types = torch.zeros(M, dtype=torch.long, device=device, requires_grad=False)
    for i, s in enumerate(slices):
        types[s] = i
    sorted_data, tensor_slice = compact_tensor_types(data, types, device=device)
    other = torch.randn((len(slices), K, K), device=device, dtype=dtype)
    if phase == "forward":
        output = ops.fasten_segment_matmul(sorted_data, tensor_slice.slices, other, engine, tensor_slice)
        output_ref = torch.zeros((M, K), device=device, dtype=dtype)
        for i in range(len(slices)):
            s = slices[i]
            output_ref[s] = torch.matmul(data[s], other[i])
        assert torch.allclose(output, output_ref, atol=1e-1, rtol=1e-1)

    elif phase == "backward":
        sorted_data.requires_grad = True
        other.requires_grad = True
        output = ops.fasten_segment_matmul(sorted_data, tensor_slice.slices, other, engine, tensor_slice)
        output_grad = torch.randn_like(output)
        output.backward(output_grad)
        sorted_data_grad_ref = torch.zeros_like(data, dtype=dtype)
        other_grad_ref = torch.zeros_like(other, dtype=dtype)
        for i in range(len(slices)):
            s = slices[i]
            sorted_data_grad_ref[s] = torch.matmul(output_grad[s], other[i].t())
            other_grad_ref[i] = torch.matmul(sorted_data[s].t(), output_grad[s])
        assert torch.allclose(sorted_data.grad, sorted_data_grad_ref, atol=1e-1, rtol=1e-1)
        assert torch.allclose(other.grad, other_grad_ref, atol=1e-1, rtol=1e-1)
